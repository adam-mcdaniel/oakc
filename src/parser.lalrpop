
use crate::{Identifier, hir::{HirProgram, HirDeclaration, HirStructure, HirFunction, HirExpression, HirConstant, HirStatement, HirType}};

grammar;

pub Program: HirProgram = <(Declaration)*> => HirProgram::new(<>, 512);

Declaration: HirDeclaration = {
    "#" "[" "assert" "(" <Constant> ")" "]" => HirDeclaration::Assert(<>),
    "#" "[" "extern" "(" <Str> ")" "]" => HirDeclaration::Extern(<>),
    "#" "[" "include" "(" <Str> ")" "]" => HirDeclaration::Include(<>),
    "#" "[" "heap" "(" <Num> ")" "]" => HirDeclaration::HeapSize(<> as i32),
    "#" "[" "error" "(" <Str> ")" "]" => HirDeclaration::Error(<>),
    "#" "[" "if" "(" <cond:Constant> ")" "{" <code:Program> "}" "]" => HirDeclaration::If(cond, code),
    "#" "[" "if" "(" <cond:Constant> ")" "{" <then_code:Program> "}" "else" "{" <else_code:Program> "}" "]" => HirDeclaration::IfElse(cond, then_code, else_code),
    "const" <name:Ident> "=" <expr:Constant> ";" => HirDeclaration::Constant(name, expr),
    <Function> => HirDeclaration::Function(<>),
    <Structure> => HirDeclaration::Structure(<>),
}

Str: String = <s:r#""(\\.|[^"])*""#> => String::from(&s[1..s.len()-1]).replace("\\\"", "\"").replace("\\n", "\n").replace("\\r", "\r").replace("\\t", "\t").replace("\\0", "\0");
Char: char = <s:r#"'(\\.|[^'])'"#> => s.replace("\\'", "'").replace("\\n", "\n").replace("\\r", "\r").replace("\\t", "\t").replace("\\0", "\0").chars().nth(1).unwrap() as char;

Num: f64 = {
    r"([0-9]+([.][0-9]*)?|[.][0-9]+)" => <>.to_string().parse::<f64>().unwrap(),
}

Ident: Identifier = {
    <head:(r"[a-zA-Z_][a-zA-Z0-9_]*" "::")*> <tail:r"[a-zA-Z_][a-zA-Z0-9_]*"> => {
        let mut result = String::new();
        for (a, b) in head {
            result += a;
            result += b;
        }
        result += tail;
        result
    }
    
}

List<Begin, T, Sep, End>: Vec<T> = {
    <first:Begin> <list: (<T> <Sep>)*> <end:T?> <last:End> => {
        match end {
            None => list.iter().map(|(v, s)| v.clone()).collect(),
            Some(val) => {
                let mut list: Vec<_> = list.iter().map(|(v, s)| v.clone()).collect();
                list.push(val);
                list
            }
        }
    }
}

Constant: HirConstant = <ConstantMathBottom> => <>;

ConstantAtom: HirConstant = {
    "isdef" "(" <Str> ")" => HirConstant::IsDefined(<>),
    <Ident> => HirConstant::Constant(<>),
    <Num> => HirConstant::Float(<>),
    <Char> => HirConstant::Character(<>),
    "-" <ConstantAtom> => HirConstant::Subtract(Box::new(HirConstant::Float(0.0)), Box::new(<>)),
    "!" <ConstantAtom> => HirConstant::Not(Box::new(<>))
}

ConstantMathBottom: HirConstant = {
    <l:ConstantMathLow> "&&" <r:ConstantMathLow> => HirConstant::And(Box::new(l), Box::new(r)),
    <l:ConstantMathLow> "||" <r:ConstantMathLow> => HirConstant::Or(Box::new(l), Box::new(r)),
    <ConstantMathLow> => <>
}

ConstantMathLow: HirConstant = {
    <l:ConstantMathMiddle> "==" <r:ConstantMathMiddle> => HirConstant::Equal(Box::new(l), Box::new(r)),
    <l:ConstantMathMiddle> "!=" <r:ConstantMathMiddle> => HirConstant::NotEqual(Box::new(l), Box::new(r)),
    <l:ConstantMathMiddle> ">=" <r:ConstantMathMiddle> => HirConstant::GreaterEqual(Box::new(l), Box::new(r)),
    <l:ConstantMathMiddle> ">" <r:ConstantMathMiddle> => HirConstant::Greater(Box::new(l), Box::new(r)),
    <l:ConstantMathMiddle> "<=" <r:ConstantMathMiddle> => HirConstant::LessEqual(Box::new(l), Box::new(r)),
    <l:ConstantMathMiddle> "<" <r:ConstantMathMiddle> => HirConstant::Less(Box::new(l), Box::new(r)),
    <ConstantMathMiddle> => <>
}

ConstantMathMiddle: HirConstant = {
    <l:ConstantMathHigh> "+" <r:ConstantMathHigh> => HirConstant::Add(Box::new(l), Box::new(r)),
    <l:ConstantMathHigh> "-" <r:ConstantMathHigh> => HirConstant::Subtract(Box::new(l), Box::new(r)),
    <ConstantMathHigh> => <>
}

ConstantMathHigh: HirConstant = {
    <l:ConstantAtom> "*" <r:ConstantAtom> => HirConstant::Multiply(Box::new(l), Box::new(r)),
    <l:ConstantAtom> "/" <r:ConstantAtom> => HirConstant::Divide(Box::new(l), Box::new(r)),
    <ConstantAtom> => <>
}

Function: HirFunction = {
    "fn" <name:Ident> <args:List<"(", (Ident ":" Type), ",", ")">> <body:Body> => HirFunction::new(name, args.iter().map(|(a, _, t)| (a.clone(), t.clone())).collect(), HirType::Void, body),
    "fn" <name:Ident> <args:List<"(", (Ident ":" Type), ",", ")">> "->" <return_type:Type> <body:Body> => HirFunction::new(name, args.iter().map(|(a, _, t)| (a.clone(), t.clone())).collect(), return_type, body),
}

Structure: HirStructure = "type" <name:Ident> "(" <size:Constant> ")" "{" <methods:Function*> "}" => HirStructure::new(name, size, methods);

Body: Vec<HirStatement> = "{" <head: Statement*> <tail: SmallStatement?> "}" => {
    let mut result = Vec::new();
    for stmt in head { result.push(stmt) }
    if let Some(stmt) = tail { result.push(stmt) }
    result
};

Type: HirType = {
    "&" <t:Type> => HirType::Pointer(Box::new(t)),
    "void" => HirType::Void,
    "num"  => HirType::Float,
    "char" => HirType::Character,
    <Ident> => HirType::Structure(<>)
}

Statement: HirStatement = {
    <BodyStatement> => <>,
    <SmallStatement> ";" => <>
}

BodyStatement: HirStatement = {
    "for" "(" <pre:SmallStatement> ";" <cond:Expression> ";" <post:SmallStatement> ")" <body:Body> => HirStatement::For(Box::new(pre), cond, Box::new(post), body),
    "while" <cond:Expression> <body:Body> => HirStatement::While(cond, body),
    "if" <cond:Expression> <body:Body> => HirStatement::If(cond, body),
    "if" <cond:Expression> <then_body:Body> "else" <else_body:Body> => HirStatement::IfElse(cond, then_body, else_body),
}

SmallStatement: HirStatement = {
    "return" <exprs:List<"[", Expression, ",", "]">> => HirStatement::Return(exprs),
    "return" <expr:Expression> => HirStatement::Return(vec![expr]),
    "free" <addr:Expression> ":" <size:Expression> => HirStatement::Free(addr, size),
    "let" <name:Ident> "=" <expr:Expression> => HirStatement::AutoDefine(name, expr),
    "let" <name:Ident> ":" <t:Type> "=" <expr:Expression> => HirStatement::Define(name, t, expr),
    <name:Ident> "=" <expr:Expression> => HirStatement::AssignVariable(name, expr),
    "*" <lhs:Expression> "=" <rhs:Expression> => HirStatement::AssignAddress(lhs, rhs),
    <ptr:ExpressionAtom> "[" <idx:Expression> "]" "=" <rhs:Expression> => HirStatement::AssignAddress(HirExpression::Index(Box::new(ptr), Box::new(idx)), rhs),
    <instance:ExpressionAtom> "->" <name:Ident> "=" <rhs:Expression> => HirStatement::AssignAddress(HirExpression::Method(Box::new(instance), name, vec![]), rhs),

    <Expression> => HirStatement::Expression(<>)
}

Expression: HirExpression = {
    <expr:ExpressionAtom> "as" <t:Type> => HirExpression::TypeCast(Box::new(expr), t),
    "*" <ptr:ExpressionBottom> => HirExpression::Deref(Box::new(ptr)),
    <ExpressionBottom> => <>,
}

ExpressionAtom: HirExpression = {
    "alloc" "(" <size:Expression> ")" => HirExpression::Alloc(Box::new(size)),
    <name:Ident> <args:List<"(", Expression, ",", ")">> => HirExpression::Call(name, args),
    <name:Ident> "!" <args:List<"(", Expression, ",", ")">> => HirExpression::ForeignCall(name, args),
    <Ident> => HirExpression::Variable(<>),
    <Str> => HirExpression::String(<>),

    "@" => HirExpression::Void,
    <Num> => HirExpression::Constant(HirConstant::Float(<>)),
    <Char> => HirExpression::Constant(HirConstant::Character(<>)),

    "!" <ExpressionAtom> => HirExpression::Not(Box::new(<>)),
    "&" <name:Ident> => HirExpression::Refer(name),
    "(" <Expression> ")" => <>,
    "-" <ExpressionAtom> => HirExpression::Subtract(Box::new(HirExpression::Constant(HirConstant::Float(0.0))), Box::new(<>)),
}

ExpressionBottom: HirExpression = {
    <l:ExpressionLow> "&&" <r:ExpressionLow> => HirExpression::And(Box::new(l), Box::new(r)),
    <l:ExpressionLow> "||" <r:ExpressionLow> => HirExpression::Or(Box::new(l), Box::new(r)),
    <ExpressionLow> => <>
}

ExpressionLow: HirExpression = {
    <l:ExpressionMiddle> "==" <r:ExpressionMiddle> => HirExpression::Equal(Box::new(l), Box::new(r)),
    <l:ExpressionMiddle> "!=" <r:ExpressionMiddle> => HirExpression::NotEqual(Box::new(l), Box::new(r)),
    <l:ExpressionMiddle> ">=" <r:ExpressionMiddle> => HirExpression::GreaterEqual(Box::new(l), Box::new(r)),
    <l:ExpressionMiddle> ">" <r:ExpressionMiddle> => HirExpression::Greater(Box::new(l), Box::new(r)),
    <l:ExpressionMiddle> "<=" <r:ExpressionMiddle> => HirExpression::LessEqual(Box::new(l), Box::new(r)),
    <l:ExpressionMiddle> "<" <r:ExpressionMiddle> => HirExpression::Less(Box::new(l), Box::new(r)),
    <ExpressionMiddle> => <>
}

ExpressionMiddle: HirExpression = {
    <l:ExpressionHigh> "+" <r:ExpressionHigh> => HirExpression::Add(Box::new(l), Box::new(r)),
    <l:ExpressionHigh> "-" <r:ExpressionHigh> => HirExpression::Subtract(Box::new(l), Box::new(r)),
    <ExpressionHigh> => <>
}

ExpressionHigh: HirExpression = {
    <ptr:ExpressionAtom> "[" <idx:Expression> "]" => HirExpression::Deref(Box::new(HirExpression::Index(Box::new(ptr), Box::new(idx)))),
    <instance:ExpressionAtom> "." <name:Ident> <args:List<"(", Expression, ",", ")">> => HirExpression::Method(Box::new(instance), name, args),
    <instance:ExpressionAtom> "." <name:Ident> => HirExpression::Method(Box::new(instance), name, vec![]),
    <instance:ExpressionAtom> "->" <name:Ident> <args:List<"(", Expression, ",", ")">> => HirExpression::Deref(Box::new(HirExpression::Method(Box::new(instance), name, args))),
    <instance:ExpressionAtom> "->" <name:Ident> => HirExpression::Deref(Box::new(HirExpression::Method(Box::new(instance), name, vec![]))),
    <l:ExpressionAtom> "*" <r:ExpressionAtom> => HirExpression::Multiply(Box::new(l), Box::new(r)),
    <l:ExpressionAtom> "/" <r:ExpressionAtom> => HirExpression::Divide(Box::new(l), Box::new(r)),
    <ExpressionAtom> => <>
}