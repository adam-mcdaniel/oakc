#[std]

// The number of memory cells the `Date` type consumes
const DATE = 3;
type Date(DATE) {
    fn new(month: num, day: num, year: num) -> Date {
        return [month, day, year]
    }

    fn birthday() -> Date {
        return Date::new(5, 14, 2002);
    }
    
    fn month(self: &Date) -> &num { return self as &num; }
    fn day(self: &Date)   -> &num { return (self + 1) as &num; }
    fn year(self: &Date)  -> &num { return (self + 2) as &num; }

    fn tomorrow(self: &Date)  { self->day = self->day + 1; }
    fn yesterday(self: &Date) { self->day = self->day - 1; }

    fn next_week(self: &Date) {
        for (let i: num = 0; i<7; i=i+1) {
            self.tomorrow();
        }
    }

    fn print(self: &Date, is_american: bool) {
        if is_american {
            prn!(self->month); prc!('/');
            prn!(self->day); prc!('/');
            prn!(self->year); 
        } else {
            prn!(self->day); prc!('/');
            prn!(self->month); prc!('/');
            prn!(self->year); 
        }
    }

    fn println(self: &Date, is_american: bool) { self.print(is_american); prend!(); }
}

fn main() {
    let bday: Date = Date::birthday();

    bday.println(true); // American
    bday.println(false); // Non-American
    
    // Increment the day value
    bday.tomorrow();
    
    bday.println(true); // American
    bday.println(false); // Non-American
    
    // Increment the day value seven times
    bday.next_week();

    bday.println(true); // American
    bday.println(false); // Non-American
}