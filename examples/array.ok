#[heap(512)]
const ARRAY = 3;
type Array(ARRAY) {
    fn new(len: num, elem_size: num) -> Array {
        return [len, elem_size, alloc(len * elem_size)]
    }

    fn len(self: &Array) -> &num {
        return self as &num
    }

    fn elem_size(self: &Array) -> &num {
        return (self + 1) as &num
    }

    fn contents(self: &Array) -> &&void {
        return (self + 2) as &&void
    }

    fn idx(self: &Array, n: num) -> &void {
        return self->contents + (n * (self->elem_size))
    }

    fn print(self: &Array) -> void {
        prn!(self->len); prc!(',');
        prn!(self->elem_size); prc!(',');
        prn!(self->contents);
        prc!('.');
        prend!();
    }

    fn drop(self: &Array) -> void {
        free self->contents: ((self->len) * (self->elem_size));
    }
}

const DATE = 3;
type Date(DATE) {
    fn from(ptr: &void) -> &Date { return ptr as &Date }
    fn new(month: num, day: num, year: num) -> Date {
        return [month, day, year]
    }

    fn birthday() -> Date { return Date::new(5, 14, 2002) }

    fn month(self: &Date) -> &num { return self as &num }
    fn day(self: &Date)   -> &num { return (self + 1) as &num }
    fn year(self: &Date)  -> &num { return (self + 2) as &num }

    fn print(self: &Date) -> void {
        prn!(self->month);
        prc!('/');
        prn!(self->day);
        prc!('/');
        prn!(self->year);
        prend!();
    }

    fn yesterday(self: &Date) -> Date {
        self->day = self->day - 1;
        return *self
    }

    fn tomorrow(self: &Date) -> Date {
        self->day = self->day + 1;
        return *self
    }

    fn next_week(self: &Date) -> Date {
        let result: Date = *self;
        for (let i:num=0; i<10; i=i+1) {
            result = result.tomorrow();
        }
        return result
    }

    fn next_month(self: &Date) -> Date {
        self->month = self->month + 1;
        return *self
    }
}

fn main() -> void {
    let arr: Array = Array::new(4, DATE);
    arr.print();

    *arr.idx(0) = Date::birthday();
    *arr.idx(1) = Date::birthday().tomorrow();
    *arr.idx(2) = Date::birthday().yesterday();
    *arr.idx(3) = (Date::birthday().next_week()).next_month();
    // Date::from(arr.idx(1)).print();
    for (let i:num=0; i < arr->len; i=i+1) {
        Date::from(arr.idx(i)).print();
    }

    arr.drop();
}